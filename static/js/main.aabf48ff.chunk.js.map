{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","fact","setFact","inputSearch","setInputSearch","typeOfInfo","setInfo","fetchingUrl","url","fetch","then","res","json","quote","className","value","onChange","e","target","defaultValue","number","type","defaultChecked","name","onSubmit","preventDefault","placeholder","text","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OA0EeA,MArEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGiBJ,mBAAS,QAH1B,mBAGNK,EAHM,KAGMC,EAHN,KAsBb,SAASC,EAAYC,GACnBC,MAAMD,GACHE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAIX,EAAQW,MAG3B,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,SAA2B,0GAC3B,sBAAKA,UAAU,aAAaC,MAAOV,EAAYW,SA1B1B,SAACC,GACxBX,EAAQW,EAAEC,OAAOC,cACblB,EAAKmB,QACPb,EAAY,yBAAD,OAA0BN,EAAKmB,OAA/B,YAAyCH,EAAEC,OAAOC,aAAlD,WAuBX,UACE,4CAEE,uBAAOE,KAAK,QAAQN,MAAM,OAAOO,eAA6B,SAAbjB,EAAqBkB,KAAK,gBAE7E,yCAEE,uBAAOF,KAAK,QAAQN,MAAM,OAAOQ,KAAK,gBAExC,2CAEE,uBAAOF,KAAK,QAAQN,MAAM,SAASQ,KAAK,mBAI5C,uBAAMC,SAlCV,SAAsBP,GACpBA,EAAEQ,iBACFlB,EAAY,yBAAD,OAA0BJ,EAA1B,YAAyCE,EAAzC,UACXD,EAAe,KA+Bb,UACE,uBACEiB,KAAK,SACLE,KAAK,eACLG,YAAY,sBACZV,SAAU,SAAAC,GAAC,OAAIb,EAAea,EAAEC,OAAOH,QACvCA,MAAOZ,IAER,wBAAQkB,KAAK,SAASP,UAAU,MAAhC,uBAGH,qBAAKA,UAAU,UAAf,SACE,6BAAKb,EAAK0B,SAGZ,wBAAQb,UAAU,gBAAgBc,QA3Cf,WACrBrB,EAAY,gCAAD,OAAiCF,EAAjC,WA0CT,+BCtDSwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aabf48ff.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nimport './App.css';\n\nfunction App() {\n  const [fact, setFact] = useState(\"\");\n  const [inputSearch, setInputSearch] = useState(\"\");\n  const [typeOfInfo, setInfo] = useState(\"year\")\n\n  const infoTypeSelector = (e) => {\n    setInfo(e.target.defaultValue)\n    if (fact.number) {\n      fetchingUrl(`http://numbersapi.com/${fact.number}/${e.target.defaultValue}?json`)\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    fetchingUrl(`http://numbersapi.com/${inputSearch}/${typeOfInfo}?json`)\n    setInputSearch(\"\");\n  }\n\n  const generateRandom = () => {\n    fetchingUrl(`http://numbersapi.com/random/${typeOfInfo}?json`)\n  }\n  \n  function fetchingUrl(url) {\n    fetch(url)\n      .then(res => res.json())\n      .then(quote => setFact(quote))\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\"><strong>Choose the type of information and enter a number to learn a fact!</strong></h1>\n      <div className=\"checkBoxes\" value={typeOfInfo} onChange={infoTypeSelector}>\n        <label>\n          History\n          <input type=\"radio\" value=\"year\" defaultChecked={typeOfInfo===\"year\"} name=\"infotype\" />\n        </label>\n        <label>\n          Math\n          <input type=\"radio\" value=\"math\" name=\"infotype\" />\n        </label>\n        <label>\n          Trivia\n          <input type=\"radio\" value=\"trivia\" name=\"infotype\" />\n        </label>\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          name='input-number'\n          placeholder='Enter a number/year'\n          onChange={e => setInputSearch(e.target.value)}\n          value={inputSearch}\n        />\n         <button type=\"submit\" className=\"btn\" >Submit</button>\n      </form>\n        \n      <div className=\"factBox\">\n        <h3>{fact.text}</h3>\n      </div>\n\n      <button className=\"btn btnRandom\" onClick={generateRandom}>\n        Random number\n      </button>\n\n    </div>\n  )\n}\n\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}